package com.novelbio.analysis.seq.genomeNew.gffOperate;

import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import com.novelbio.base.dataOperate.TxtReadandWrite;


/**
 * 本开闭区间已经设定
 * UCSC的默认文件的起点是开区间，终点为闭区间。水稻拟南芥的还没有设定开闭区间
 * 专门读取UCSC的gene坐标文件,读取时从第二行读起
 * 读取完毕后可统计内含子外显子的数目
 * group:Genes and Gene Prediction Tracks
 * track:UCSC Genes
 * table:knownGene
 * output format:all fields from selected table
 * @author zong0jie
 *
 */
public class GffHashUCSCgene extends GffHashGene
{

	/**
	 * @Override
	 * 最底层读取gff的方法，本方法只能读取UCSCknown gene<br>
	 * 输入Gff文件，最后获得两个哈希表和一个list表,读取时从第二行读起<br/>
	 * 结构如下：<br/>
     * 输入Gff文件，最后获得两个哈希表和一个list表, 结构如下：<br>
     * <b>1.Chrhash</b><br>
     * （ChrID）--ChrList-- GeneInforList(GffDetail类)
     * 其中ChrID为小写，代表染色体名字，因此用get来获取相应的ChrList的时候要输入小写的ChrID, chr格式，全部小写 chr1,chr2,chr11<br>
     *  <b>2.locHashtable</b><br>
     * 其中LOCID代表具体的条目编号，在UCSCkonwn gene里面没有转录本一说，
	 * 会有有多个LOCID共用一个区域的情况，所以有多个不同的LOCID指向同一个GffdetailUCSCgene
     *  <b>3.LOCIDList</b><br>
     * （LOCID）这个List顺序存储每个基因号或条目号，这个打算用于提取随机基因号，实际上是所有条目按顺序放入，但是不考虑转录本(UCSC)或是重复(Peak) 这个ID与locHash一一对应，但是不能用它来确定某条目的前一个或后一个条目 <br>
     * <b>4.LOCChrHashIDList </b><br>
     *   LOCChrHashIDList中保存LOCID代表具体的条目编号,与Chrhash里的名字一致，将同一基因的多个转录本放在一起，用斜线分割"/"： NM_XXXX/NM_XXXX...<br>
	 * @throws Exception 
	 */
	public void ReadGffarray(String gfffilename) throws Exception {

		// 实例化四个表
		Chrhash = new HashMap<String, ArrayList<GffDetailAbs>>();// 一个哈希表来存储每条染色体
		locHashtable = new HashMap<String, GffDetailAbs>();// 存储每个LOCID和其具体信息的对照表
		LOCIDList = new ArrayList<String>();// 顺序存储每个基因号，这个打算用于提取随机基因号
		LOCChrHashIDList = new ArrayList<String>();

		TxtReadandWrite txtGffRead = new TxtReadandWrite();
		txtGffRead.setParameter(gfffilename, false, true);
		BufferedReader readGff = txtGffRead.readfile();

		ArrayList<GffDetailAbs> LOCList = null;// 顺序存储每个loc的具体信息，一条染色体一个LOCList，最后装入Chrhash表中
		String content = "";
		readGff.readLine();// 跳过第一行
		String chrnametmpString = "";
		// int mm=0;//计数的东西
		while ((content = readGff.readLine()) != null) {
			String[] geneInfo = content.split("\t");
			String[] exonStarts = geneInfo[8].split(",");
			String[] exonEnds = geneInfo[9].split(",");
			chrnametmpString = geneInfo[1].toLowerCase();// 小写的chrID
			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 新的染色体
			if (!Chrhash.containsKey(chrnametmpString)) // 新的染色体
			{
				if (LOCList != null)// 如果已经存在了LOCList，也就是前一个LOCList，那么先截短，然后将它按照gffGCtmpDetail.numberstart排序
				{
					LOCList.trimToSize();
					// 把peak名称顺序装入LOCIDList
					for (GffDetailAbs gffDetail : LOCList) {
						LOCChrHashIDList.add(gffDetail.locString);
					}
				}
				LOCList = new ArrayList<GffDetailAbs>();// 新建一个LOCList并放入Chrhash
				Chrhash.put(chrnametmpString, LOCList);
			}
			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 添加转录本
			// 看本基因的转录起点是否小于上个基因的转录终点，如果小于，则说明本基因是上个基因的一个转录本
			GffDetailGene lastGffdetailUCSCgene;
			if (LOCList.size() > 0 
					&& // 如果转录本方向不同，那就新开一个转录本
					geneInfo[2].equals("+") == (lastGffdetailUCSCgene = (GffDetailGene) LOCList.get(LOCList.size() - 1)).cis5to3
					&&
					Integer.parseInt(geneInfo[3])+startRegion < lastGffdetailUCSCgene.numberend)
			{
				// 修改基因起点和终点
				if (Integer.parseInt(geneInfo[3])+startRegion < lastGffdetailUCSCgene.numberstart)
					lastGffdetailUCSCgene.numberstart = Integer.parseInt(geneInfo[3])+startRegion;
				if (Integer.parseInt(geneInfo[4])+endRegion > lastGffdetailUCSCgene.numberend)
					lastGffdetailUCSCgene.numberend = Integer.parseInt(geneInfo[4])+endRegion;

				// 将本基因(转录本)的ID装入locString中
				lastGffdetailUCSCgene.locString = lastGffdetailUCSCgene.locString + "/" + geneInfo[0];
				lastGffdetailUCSCgene.addsplitlist(geneInfo[0]);
				// 添加一个转录本，然后将相应信息:
				// 第一项是该转录本的Coding region start，第二项是该转录本的Coding region
				// end,从第三项开始是该转录本的Exon坐标信息
				lastGffdetailUCSCgene.addATGUAG(Integer.parseInt(geneInfo[5])+startRegion,Integer.parseInt(geneInfo[6])+endRegion);
				
				int exonCount = Integer.parseInt(geneInfo[7]);
				for (int i = 0; i < exonCount; i++) {
					lastGffdetailUCSCgene.addExonUCSC(Integer.parseInt(exonStarts[i])+startRegion, Integer.parseInt(exonEnds[i])+endRegion);
				}
				// 将基因(转录本ID)装入LOCList
				LOCIDList.add(geneInfo[0]);
				// 将locHashtable中相应的项目也修改，同时加入新的项目
				// 因为UCSC里面没有转录本一说，只有两个LOCID共用一个区域的情况，所以只能够两个不同的LOCID指向同一个GffdetailUCSCgene
				String[] allLOCID = lastGffdetailUCSCgene.locString.split("/");
				for (int i = 0; i < allLOCID.length; i++) {
					locHashtable.put(allLOCID[i], lastGffdetailUCSCgene);
				}
				continue;
			}
			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 添加新基因
			GffDetailGene gffDetailUCSCgene = new GffDetailGene(chrnametmpString, geneInfo[0], geneInfo[2].equals("+"));
			gffDetailUCSCgene.numberstart = Integer.parseInt(geneInfo[3])+startRegion;
			gffDetailUCSCgene.numberend = Integer.parseInt(geneInfo[4])+endRegion;
			gffDetailUCSCgene.addsplitlist(geneInfo[0]);
			// 添加一个转录本，然后将相应信息:
			// 第一项是该转录本的Coding region start，第二项是该转录本的Coding region
			// end,从第三项开始是该转录本的Exon坐标信息
			gffDetailUCSCgene.addATGUAG(Integer.parseInt(geneInfo[5])+startRegion,Integer.parseInt(geneInfo[6])+endRegion);
			int exonCount = Integer.parseInt(geneInfo[7]);
			for (int i = 0; i < exonCount; i++) {
				gffDetailUCSCgene.addExonUCSC(Integer.parseInt(exonStarts[i])+startRegion,Integer.parseInt(exonEnds[i])+endRegion);
			}
			LOCList.add(gffDetailUCSCgene);
			LOCIDList.add(geneInfo[0]);
			locHashtable.put(geneInfo[0], gffDetailUCSCgene);
		}
		LOCList.trimToSize();
		// System.out.println(mm);
		for (GffDetailAbs gffDetail : LOCList) {
			LOCChrHashIDList.add(gffDetail.locString);
		}
		txtGffRead.close();
	}

	@Override
	public GffDetailGene searchLOC(String LOCID) {
		return (GffDetailGene) locHashtable.get(LOCID);
	}

	@Override
	public GffDetailGene searchLOC(String chrID, int LOCNum) {
		return (GffDetailGene) Chrhash.get(chrID).get(LOCNum);
	}

	@Override
	protected GffCodGene setGffCodAbs(String chrID, int Coordinate) {
		return new GffCodGene(chrID, Coordinate);
	}

	
}
